 - Chapitre 2, Nos premiers pas avec React : 
    Ajouter les liens CDN de react pour travailler sur le DOM
    creer un fichier app.js
    creer un element react de type h1, ne pas lui assigner d'enfant lui donner un text bonjour tout le monde 
    le renommer en title
    afficher le titre sur le body
    afficher sur une div nommé app
    ajouter un autre enfant au div avec un id app ###
    créer dans title un nouveau element react de type span aucune propriéte et lui assigner 0 comme text
    sauvegarder les etapes passer dans une function nommé render
    ensuite l'appeler au chargement de la page
    creer une variable n qui est égal à 0
    faire un window setInterval qui incremente n de 1 toute les secondes et qui charger ensuite la fonction render()

- Chapitre 3, la syntaxe JSX :
    Ajouter le liens du script babel juste avant le app.js
    definir le type de app js text babel
    supprimer le reactcreateElement sans la synatxe JSX
    creer un h1 avec dedans bonjour les gens
    ensuiter creer un span et mettre dedans 0
    remplacer le zero par une expresion evalue n
    creer une function nommé numberFormat qui prend n en paramétre
        il retourné n qui va ajouter un zero devant le n
    faire une condition qui afficher les nombre impaire
    dans span remplace l'appel au fonction par un tableau avec deux elements
    ajouter un id au h1 nommé title
    creer une classe dans le h1 nommé title
    utiliser l'interpolation pour que id de h1 soit title suivit de n
    créer un tableau nommé items qui a 3 enfants tache 1, 2, 3 dans la function render
    mettre h1 dans un div et dans ce div creer un ul à la suite de h1 
        ul prends un li nommée premier li
    remplace le mot div par un fragment react
    creer une const lis qui va faire une map sur le tableau items et pour chaque items
    il va creer un li et lui append l'élément
    remplacer lis dans ul par la function map
    ensuite attribue une clé à chaque item

- Chapitre 4, Notre premier composant : 
    Tout supprimer
    Creer une fonction nommé Welcome qui prend une paramétre nommé props
    cette fonction retourne un h1 qui dit bonjour
    faire une balise impaire avec welcome dans un render du dom de react
    ensuite le mettre sur le div au id app 
    ajouter un attribue à la balise welcome nommé name avec une valeur jean
    faire un console log de props et voir le resultat
    faire un bonjour avec l'attribue name
    remplacer props dans le paramètre par une destructuration avec un objet nommé name
    ajouter du text content dans welcome et le faire devenir une balise paire
    remplacer tout ce qui aprés le return de la fonction par un return une div
    qui a pour enfant un h1 qui retourne bonjour avec name
    ajouter une paragraphe dans lequel on interplore children
    ajouter un paramétre qui destructure un enfant nommé children
    rénome la fonction Welcome a WelcomeFunc
    Créer une class Welcome qui fonctionner comme un composant react
    à l'interieur de cette class créer une function render qui retournera un titre h1 qui afficher bonjour
    faire un console log dans la function render du props de la class
    depuis la class Welcome afficher bonjour avec le nom de la personne et le text content de Welcome
    ne pas oublier de utiliser l'affiche sur le dom !
    construire une super propriéte et afficher props dans la console
    creer une fonction nommé Home
    cette fonction return une div qui afficher deux Welcome avec deux nom différents
    afficher Home dans le div app à la place de welcome
    creer une classe Clock qui va etendre du composant react
    dans cette class creer une fonction render qui return une div qui retourne une date to localeString
    et time to localeString 
    afficher Clock dans la function Home
    créer un super constructeur qui prends en paramétre props sur le constructeur et super
     creer dans le constructeur une variable nommée state qui est objet qui contient une clé date de type Date
    ensuite dans utiliser la clé date de state à dans le render
    dans Clock créer une methode componentDidMount et une autre nommé componentWillUnMount
    Dans le constructeur créer une variable timer et le mettre à null
    dans la fonction componentDidMount assigné a la variable timer un setInterval de 1 seconde
    dans la fonction componentWillUnMount utiliser un clearInterval sur le timer
    creer une methode nommé tick dans cette fonction utiliser une methode nommé setState 
    qui prends en paramètre un objet avec une clé date qui est de type date
    dans la fonction componentDidMount dans le set interval appel la methode tick a la place de la fonction
    utiliser bind sur la methode tick et lui en paramètre this pour ne pas perdre le contexte de this
    créer une class incrementer qui incremente affiche dans Home
    incremente aura une propriéte nommé start qui sera la valeur de départ
    remplacer l'objet de setState par une fonction qui prend en paramètre state et props
    il retourne l'objet qui était entre la paranthèse de setState
    ajouter une propriéte nommé step qui sera la valeur d'incrementation
    ajouter la valeur d'incrementation par default de step est 1 et start à 0
    et faire fonctionner la classe Incrementer sans valeur dans start ni dans step

- Chapitre 5, Les évènements :
    Créer une class Nommé ManualIncrementer lui etendre un react Component
    dans le constructeur creer state qui prends un objet avec clé n à laquelle on assigner 0
    appeler la fonction render qui retourne dans une div n et un bouton qui permet d'incrementer
    créer la fonction incrementer qui incremente de 1 en 1
    appeler ManualIncrementer dans Home
    mettre un evenement sur le bouton pour incrementer la valeur au click
    utiliser un prevent default dans incremente de ManualIncrementer
    et remplace le bouton par un lien
    ajouter une clé timer dans l'objet this state et sa valeur est null
    supprimer l'autre timer
    dans la class incrementer créer une fonction nommé pause
    il fait un clear interval sur la clé timer de state il le met à null avec setState;
    créer une fonction nommé play il fait un clear 
    interval sur la clé timer de state et fais un setState sur timer de state il lui
    assigne toutes les secondes une l'incrementation de fonction incremente
    utiliser la methode play dans componentDidMount et pause dans componentWillUnMount
    ajouter un bouton son innerHTML est egal a une fonction nommé label
     qui onclick appel pause fait appel a une fonction nommé toggle
    la fonction nommé toggle retourne un ternaire sur timer de state
    pour appeler la fonction play ou pause
    la fonction nommé label qui fais un ternaire si timer de state 
    de la class est true affiche un string Pause sinon appel un string play
    créer une fonction nommé label qui return un ternaire sur le timer de state il retourne
    sois Pause ou Lecture
    créer une methode reset qui fait un setState sur n et le met égal à start
    créer un bouton qui on click appel reset et son innerHTML est Réinitialiser
    dans reset appeler pause et play avant le set state
    dans le constructeur assigne la methode toggle et reinitialiser a des variable
    et remplacer l'appel des fonctions dans le render par ces deux boutton

- Chapitre 6, Les Formulaires :
    Tout supprimer
    créer une class Home l'étendre de React Component
    l'appel dans un reactdom render
    dans la class home appeler une méthode render qui retourne une div
    qui contient un label appeler l'attribut htmlFor de label qui prend
    une string nommé nom sont textContent est Mon nom
    créer un input avec l'attribut type égal à un string text 
    un id égal à un string nom, un name égal a un string nom
    créer un constructeur dans ce dernier créer un etat avec une clé
    nom qui prend un string nommé jean
    appeler la clé nom dans le input en le mettant dans value du input
    dans le input créer un évènements onChange qui est égal a une variable
    nommé handleChange
    créer la méthode handleChange elle prend une variable nommé e en paramètre
    dans le constructeur assigne a la variable handleChange a la méthode handleChange
    et ne pas oublie de bind le this
    Dans la méthode handleChange faire un setstate sur la clé nom lui assigner la valeur
    de la target de e
    créer un textarea avec l'attribut  un id égal à un string nom, 
    un name égal a un string nom
    Dans ce textarea créer un évènements onChange qui est égal a la variable
    nommé handleChange
    créer une balise select avec des options un avec une valeur demo1 son textContent est 
    égal à Demo1 faire pareil jusqu'a démo 3
    dans select assigner a son value la clé nom de state qui égal à demo2 et utiliser
    onChange sur select
    dans le div afficher avant le select la clé nom de state 
    rendre le champs mutiple
    assigné a la clé nom de state un tableau avec deux string demo2 et demo1
    stringify l'affichage de la clé nom dans le render
    ensuite dans handleChange faire un tableau avec selectedOptions de
    target de e et et le parcourir avec map pour affiche la valeur des 
    éléments du tableau
    dans state ajouter une clé checked qui prend un bool true
    créer un input de type checkbox lui assigne un attribut checked 
    qui est égal à la clé checked à la clé checked
    lui assigne une méthode onChange qui appel handleChange
    dans la méthode handleChange a la clé checked assigné à checked de la target de e
    ajouter une phrase en bas du DOM qui s'affiche si et seulement si l'input est check
    remplace le contenue de render
    créer une div créer un label avec un for égal a nom ensuite un input de type text 
    sa valeur est égal à la clé nom de state si on change le champs on appel la méthode
    onChange qui est handleChange lui donné et un id et un attribut name tout égal
    faire pareil avec prenom et newsletter la seule dif de newsletter est qu'il à un
    input de type checkbox
    a un string nom
    ajoute des state un nom et le prenom ont des string vide, une clé newsletter qui est égal
    à false par défault
    ajouter au DOM un string de state
    Dans la méthode handleChange faire créer une constante name qui est égal au name de la 
    target de e
    faire un setState sur le name le name doit etre entre Crochet et lui assigne la value 
    de la target de e
    creer une constante nommé type qui est égal au type de la target de e
    creer une constante value ternaire qui verifie si le type est un checkbox alors
    on recuperer le checked de la target de e sinon on récuperer la target de la value de e
    créer un input de type text  mettre son attribut defaultValue a salut
    ajouter bootstrap au projet
    creer une class nommé Field il etends de react component dans le render 
    creer une constante qui est une destructuration({}) à l'interieur de la destructuration on 
    met name, value, children et onChange il est égal au props de la class
    il retourne un div de class form-group à l'interieur
    on a un label sont for est égal au à name de la destructuration son inner est égal au children
    de la destructuration creer un input de type text sa valeur est la value de la destructuration 
    son onChange équivaut au onChange de la destructuration l'id et le name sont égal 
    à la destructuration du name lui assigne une nom de class form-control
    dans le render de home remplacer les ligne d'inputs par un div de class container à l'interieur
    on a une balise Field son nom est prénom sa value la clé nom de la state de la class son onChange
    équivaut à la function handleChange et son children nom faire pareil pour prenom
    ajouter la méthode stringify de JSON qui prends en argument state de la class
    creer une function Field qui se comporte pareil que la class Field
    ensuite en faire une fonction nommé checkbox similaire field
    ensuite l'appeler dans render de Home
    dans le render de home créer un boutton de class btn btn primary son inner est envoyer remplacer
    dans le render de home la div par un Formulaire lui assigner un onSubmit il appel la méthode 
    handleSubmit
    handleSubmit prend en paramètre e et il fait un preventDefault sur e ne pas oublie de assigne le bind
    a la variable dans le constructeur
    créer une const nommé data qui est la méthode stringify de JSON il prends en paramètre state et faire 
    un console de data ensuite 

// fini les guides pas à pas maintenant quelque infos utile seulement si besoin re regarde les vidéos

- Chapitre 7, TP : Convertisseur Celsius / Fahrenheit :

- Chapitre 10, composant pur
    creer un component pure d'une class = class (className) extends React.PureComponent
    creer un component pure d'une fonction = const (name) = React.memo((ComponentName))
    ajouter un produit à un pure component ce fait avec rest paramètre (9minutes 50secondes)
    utiliser la fonction qui à est derriere le pure component video (18minutes 30secondes)

-  Chapitre 11, Les refs et le DOM
    ....
    créer un component en function puis une class nommé Field avec inputs a l'interieur et recuperer sa valeur
sans qu'elle soit controler par react (8min40)

-  Chapitre 13, Create React App
    creer un projet react !
    creer une class Clock qui affiche l'heure et l'afficher dans l'app
    creer un css specifique a ce component

-  Chapitre 16, Les hooks useEffect

- Chapitre 17, créer un hook personnalisé
a partir de 12minutes20
on utilise jsonplaceholder pour recuperer la liste dans la categorie todo
on veut 10 item donc on utilise ? _limit=10

- Chapitre 18, Les hook useMemo & useCallback
la fonction wait : 
function wait(duration) {
  const t = Date.now();
  while (true) {
    if (Date.now() - t > duration) {
      console.log(Date.now() - t);
      return true;
    }
  }
}
la fonction encode : 
function encode(number) {
  wait(1000);
  return Date.now();
}
